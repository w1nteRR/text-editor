{"version":3,"sources":["components/common/layout/layout.js","components/common/buttons/buttons.styled.js","components/common/typography/typography.styled.js","components/common/typography/typography.shared.js","components/common/buttons/buttons.shared.js","components/common/inputs/input.styled.js","components/common/inputs/inputs.shared.js","components/common/select/select.styled.js","components/common/select/select.shared.js","redux/text/actions.js","redux/text/constants.js","hooks/useText.js","components/Control/Control.js","redux/app/actions.js","redux/app/constants.js","components/Output/Output.js","components/Editor/Edit.view.js","components/Editor/views/Color.edit.js","components/Editor/views/Size.edit.js","components/Editor/views/Control.edit.js","components/Editor/Editor.js","components/common/modal/modal.styled.js","components/common/modal/modal.shared.js","components/Json/Json.modal.js","App.js","redux/app/reducer.js","redux/text/reducer.js","redux/store.js","redux/rootReducer.js","index.js"],"names":["Container","styled","div","props","w","h","minH","maxH","align","justify","direction","wrap","m","p","bgColor","shadow","ButtonStyled","button","TextStyled","span","fontSize","color","TextCStyled","weight","uppercase","spacing","Text","text","TextC","Button","title","click","onClick","InputStyled","input","Input","change","placeholder","maxLength","value","min","max","type","onChange","Color","ColorSelect","isOpen","activeColor","onColorClick","onCloseClick","onActiveClick","showHeader","showControl","style","borderRadius","position","colors","map","index","key","val","addTextToStore","payload","deleteText","id","useText","dispatch","useDispatch","texts","useSelector","state","copy","_filter","item","add","length","equalText","filter","obj","Object","assign","concat","push","update","Date","now","findActive","activeText","getJSON","JSON","stringify","Control","useState","setText","setFontSize","isColorPickerOpen","setColor","isBgColorPickerOpen","setBgColor","useEffect","event","target","alert","Output","openEditor","cursor","EditView","current","children","ColorEdit","currColor","colorType","SizeEdit","setSize","ControlEdit","name","setName","updateTextValue","Editor","isEditorOpen","app","right","top","overflowY","overflowX","ModalStyled","Modal","JsonModal","modal","App","console","log","initialState","appReducer","action","textReducer","array","findIndex","forEach","store","createStore","combineReducers","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.384da556.chunk.js","sourcesContent":["import styled from 'styled-components'\r\n\r\nexport const Container = styled.div`\r\n    width: ${props => props.w || '100%'};\r\n    height: ${props => props.h || 'auto'};\r\n    min-height: ${props => props.minH || 'auto'};\r\n    max-height: ${props => props.maxH || 'auto'};\r\n    \r\n    display: flex;\r\n    align-items: ${props => props.align || 'center'};\r\n    justify-content: ${props => props.justify || 'center'};\r\n    flex-direction: ${props => props.direction || 'row'};\r\n    flex-wrap: ${props => props.wrap ? 'wrap' : null};\r\n    \r\n    margin: ${props => props.m || '0'};\r\n    padding: ${props => props.p || '0'};\r\n    \r\n    background-color: ${props => props.bgColor || ''};\r\n    box-shadow: ${props => props.shadow ? '0px 0px 3px rgba(0, 0, 0, 0.5)' : null };\r\n`","import styled from 'styled-components'\r\n\r\nexport const ButtonStyled = styled.button`\r\n    outline: none;\r\n    border: none;\r\n\r\n    padding: ${props => props.p || '10px'};\r\n    \r\n    background-color: ${props => props.bgColor || 'transparent'};\r\n\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n\r\n    cursor: pointer;\r\n\r\n    &:hover {\r\n        box-shadow: 0px 0 5px #1c1c1c;\r\n        transition: .5s ease-in-out;\r\n    }\r\n`","import styled from 'styled-components'\r\n\r\nexport const TextStyled = styled.span`\r\n    font-size: ${props => props.fontSize};\r\n    background-color: ${props => props.bgColor};\r\n    color: ${props => props.color};\r\n`\r\n\r\nexport const TextCStyled = styled.span`\r\n    font-size: ${props => props.fontSize || '12px'};\r\n    font-weight: ${props => props.weight || '400'};\r\n    text-transform: ${props => props.uppercase ? 'uppercase' : null};\r\n    color: ${props => props.color || \"silver\"};\r\n    letter-spacing: ${props => props.spacing || '0'};\r\n`","import React from 'react'\r\n\r\nimport { TextStyled, TextCStyled } from './typography.styled'\r\n\r\nexport const Text = ({\r\n    color,\r\n    bgColor,\r\n    fontSize,\r\n    text\r\n}) =>\r\n    <TextStyled \r\n        bgColor={bgColor} \r\n        fontSize={fontSize} \r\n        color={color}\r\n    >\r\n        {text}\r\n    </TextStyled>\r\n\r\n\r\nexport const TextC = ({\r\n    fontSize,\r\n    weight,\r\n    color,\r\n    spacing,\r\n    text,\r\n    uppercase\r\n}) =>\r\n    <TextCStyled  \r\n        fontSize={fontSize} \r\n        color={color}\r\n        spacing={spacing}\r\n        weight={weight}\r\n        uppercase={uppercase}\r\n    >\r\n        {text}\r\n    </TextCStyled>","import React from 'react'\r\n\r\nimport { ButtonStyled } from './buttons.styled'\r\nimport { TextC } from '../typography/typography.shared'\r\n\r\nexport const Button = ({ \r\n    title, \r\n    click,\r\n    p,\r\n    bgColor\r\n}) =>\r\n    <ButtonStyled \r\n        onClick={click} \r\n        p={p} \r\n        bgColor={bgColor}\r\n    >\r\n        <TextC \r\n            uppercase \r\n            text={title} \r\n            weight='600' \r\n            fontSize='12px' \r\n            color='#171717' \r\n        /> \r\n    </ButtonStyled>","import styled from 'styled-components'\r\n\r\nexport const InputStyled = styled.input`\r\n    outline: none;\r\n    border: none;\r\n\r\n    border-radius: 5px;\r\n\r\n    padding: ${props => props.p || '20px'};\r\n\r\n    width: ${props => props.w || 'auto'};\r\n\r\n    box-shadow: 0px 0 2px #1c1c1c;\r\n`","import React from 'react'\r\n\r\nimport { InputStyled } from './input.styled'\r\n\r\nexport const Input = ({ \r\n    change,\r\n    placeholder,\r\n    maxLength,\r\n    value,\r\n    min,\r\n    max,\r\n    type,\r\n    w,\r\n    p \r\n}) => \r\n    <InputStyled\r\n        value={value} \r\n        onChange={change}\r\n        min={min}\r\n        max={max}\r\n        placeholder={placeholder} \r\n        maxLength={maxLength}\r\n        type={type}\r\n        w={w}\r\n        p={p}\r\n    />\r\n    \r\n    ","import styled from 'styled-components'\r\n\r\nexport const Color = styled.div`\r\n    width: 15px;\r\n    height: 15px;\r\n\r\n    margin: 10px;\r\n\r\n    background-color: ${props => props.bgColor};\r\n\r\n    border-radius: 100%;\r\n\r\n    cursor: pointer; \r\n`","import React from 'react'\r\n\r\nimport { Container } from '../layout/layout'\r\nimport { TextC } from '../typography/typography.shared'\r\nimport { Color } from './select.styled'\r\n\r\nimport colors from '../../../utils/colors.json'\r\n\r\nexport const ColorSelect = ({\r\n    isOpen,\r\n    title,\r\n    activeColor,\r\n    onColorClick,\r\n    onCloseClick,\r\n    onActiveClick,\r\n    showHeader,\r\n    showControl = true\r\n}) => {\r\n    return (\r\n        <Container direction='column' w='200px'>\r\n            {\r\n                showHeader\r\n                ?\r\n                <Container w='150px' justify='space-around' p='10px'>\r\n                    <TextC\r\n                        text={title}\r\n                        uppercase\r\n                        color='#171717'\r\n                        weight='600'\r\n                        fontSize='12px'\r\n                    />\r\n                    <Color \r\n                        bgColor={activeColor === 'transparent' ? '#efefef' : activeColor} \r\n                        onClick={onActiveClick} \r\n                    />\r\n                </Container>\r\n                : null\r\n            }\r\n            {\r\n                isOpen\r\n                &&\r\n                <Container\r\n                    w='150px'\r\n                    h='120px'\r\n                    bgColor='#1c1c1c'\r\n                    direction='column'\r\n                    style={{\r\n                        borderRadius: 10,\r\n                        position: 'absolute'\r\n                    }}\r\n                >\r\n                    {\r\n                        showControl\r\n                        &&\r\n                        <Container p='10px 0' justify='space-around'>\r\n                            <TextC \r\n                                text={title} \r\n                                uppercase \r\n                                weight='600' \r\n                                fontSize='10px' \r\n                            />\r\n                            <Container \r\n                                onClick={onCloseClick} \r\n                                bgColor='red' \r\n                                w='25px' \r\n                                style={{ borderRadius: 100 }}\r\n                            >\r\n                                <TextC text='x' fontSize='14px' />\r\n                            </Container>\r\n                        </Container>\r\n                    }\r\n                    <Container wrap='true'>\r\n                        {\r\n                            colors.map((color, index) =>\r\n                                <Color\r\n                                    key={index}\r\n                                    bgColor={color.val}\r\n                                    onClick={() => onColorClick(color.val)}\r\n                                />\r\n                            )\r\n                        }\r\n                    </Container>\r\n                </Container>\r\n            }\r\n        </Container>\r\n    )\r\n}","import { ADD_TEXT_TO_STORE, DELETE_TEXT, SET_ACTIVE_TEXT, UPDATE_TEXT_VALUE } from './constants'\r\n\r\nexport const addTextToStore = text => ({\r\n    type: ADD_TEXT_TO_STORE,\r\n    payload: text\r\n})\r\n\r\nexport const deleteText = id => ({\r\n    type: DELETE_TEXT,\r\n    payload: id\r\n})\r\n\r\nexport const setActiveText = id => ({\r\n    type: SET_ACTIVE_TEXT,\r\n    payload: id\r\n})\r\n\r\nexport const updateTextValue = (id, text) => ({\r\n    type: UPDATE_TEXT_VALUE,\r\n    payload: {\r\n        id,\r\n        text\r\n    }\r\n})","export const ADD_TEXT_TO_STORE = 'ADD_TEXT_TO_STORE'\r\nexport const DELETE_TEXT = 'DELETE_TEXT'\r\nexport const SET_ACTIVE_TEXT = 'SET_ACTIVE_TEXT'\r\nexport const UPDATE_TEXT_VALUE = 'UPDATE_TEXT_VALUE'","import { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport { addTextToStore, deleteText, setActiveText } from '../redux/text/actions'\r\n\r\nexport const useText = text => {\r\n\r\n    const dispatch = useDispatch()\r\n    const texts = useSelector(state => state.text.texts)\r\n\r\n    const copy = [...texts]\r\n\r\n    const _filter = item => item.fontSize === text.fontSize && item.color === text.color && item.bgColor === text.bgColor\r\n\r\n    const add = () => {\r\n        const copy = [...texts]\r\n        \r\n        if(!texts.length) return dispatch(addTextToStore(text))\r\n\r\n        const equalText = copy.filter(_filter)\r\n\r\n        if(equalText.length) {\r\n            let obj = Object.assign(equalText[0], {\r\n                text: equalText[0].text.concat(text.text)\r\n            })\r\n            copy.concat(obj)\r\n        } else {\r\n            copy.push(text)\r\n        }\r\n\r\n        dispatch(addTextToStore(copy))\r\n    }\r\n\r\n    const update = () => {\r\n        const equalText = copy.filter(_filter)\r\n\r\n        if(equalText.length) {\r\n\r\n            let obj = Object.assign(equalText[0], {\r\n                id: Date.now(),\r\n                text: equalText[0].text.concat(equalText[0].text === text.text ? '' : text.text)\r\n            })\r\n\r\n            copy.concat(obj)\r\n\r\n            dispatch(addTextToStore(copy))\r\n            dispatch(deleteText(text.id))\r\n\r\n        } else {\r\n            copy.map(item => {\r\n                if(item.id === text.id) {\r\n                    Object.assign(item, text)\r\n                } \r\n            })\r\n\r\n            dispatch(addTextToStore(copy))\r\n        }        \r\n    }\r\n\r\n    const getJSON = () => JSON.stringify(texts, null, 2)\r\n\r\n    const findActive = (fontSize, color, bgColor) => {\r\n        const activeText = copy.filter(text => \r\n                text.fontSize === fontSize \r\n                && \r\n                text.color === color \r\n                && \r\n                text.bgColor === bgColor\r\n            )\r\n        dispatch(setActiveText(activeText[0]))\r\n    }\r\n\r\n    return {\r\n        add,\r\n        update,\r\n        findActive,\r\n        getJSON\r\n    }\r\n}","import React, { useState, useEffect } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\n\r\nimport { Container } from '../common/layout/layout'\r\nimport { Button } from '../common/buttons/buttons.shared'\r\nimport { Input } from '../common/inputs/inputs.shared'\r\n\r\nimport { ColorSelect } from '../common/select/select.shared'\r\n\r\nimport { useText } from '../../hooks/useText'\r\nimport { openModal } from '../../redux/app/actions'\r\n\r\nexport const Control = () => {\r\n\r\n    const [text, setText] = useState('')\r\n    const [fontSize, setFontSize] = useState('12px')\r\n    const [color, setColor] = useState({\r\n        isColorPickerOpen: false,\r\n        color: 'black'\r\n    })\r\n    const [bgColor, setBgColor] = useState({\r\n        isBgColorPickerOpen: false,\r\n        color: 'transparent'\r\n    })\r\n\r\n    const obj = {\r\n        id: Date.now(),\r\n        text,\r\n        fontSize,\r\n        color: color.color,\r\n        bgColor: bgColor.color\r\n    }\r\n\r\n    const { add, findActive } = useText(obj)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => findActive(fontSize, color.color, bgColor.color), [fontSize, color.color, bgColor.color])\r\n\r\n    return (\r\n        <Container\r\n            m='0 auto'\r\n            h='400px'\r\n            direction='column'\r\n            justify='space-around'\r\n        >\r\n            <Container m='10px' justify='flex-start'>\r\n                <Button title='Get JSON' click={() => dispatch(openModal('json'))} />\r\n            </Container>\r\n            <Container w='80%' direction='column'>\r\n                    <Input \r\n                        w='90%' \r\n                        value={text}\r\n                        placeholder='Enter text' \r\n                        change={event => setText(event.target.value)} \r\n                    />\r\n                    <Container \r\n                        justify='space-between' \r\n                        w='90%'\r\n                        m='10px'\r\n                    >\r\n                        <Input\r\n                            placeholder={fontSize}\r\n                            change={event => setFontSize(event.target.value + 'px')}\r\n                            p='10px'\r\n                            w='30px'  \r\n                        />\r\n                        <ColorSelect \r\n                            title='Color'\r\n                            showHeader={true} \r\n                            isOpen={color.isColorPickerOpen}\r\n                            activeColor={color.color}\r\n                            onActiveClick={() => setColor({\r\n                                ...color, \r\n                                isColorPickerOpen: true\r\n                            })}\r\n                            onCloseClick={() => setColor({\r\n                                ...color, \r\n                                isColorPickerOpen: false \r\n                            })}\r\n                            onColorClick={color => setColor({\r\n                                isColorPickerOpen: false,\r\n                                color\r\n                            })}\r\n                        />\r\n                        <ColorSelect \r\n                            title='BgColor' \r\n                            showHeader={true}\r\n                            isOpen={bgColor.isBgColorPickerOpen}\r\n                            activeColor={bgColor.color}\r\n                            onActiveClick={() => setBgColor({\r\n                                ...bgColor, \r\n                                isBgColorPickerOpen: true \r\n                            })}\r\n                            onCloseClick={() => setBgColor({ \r\n                                ...bgColor, \r\n                                isBgColorPickerOpen: false \r\n                            })}\r\n                            onColorClick={color => setBgColor({\r\n                                isBgColorPickerOpen: false,\r\n                                color\r\n                            })}\r\n                        />\r\n                        <Button \r\n                            title='Add text' \r\n                            bgColor='#0078F2'\r\n                            click={() => {\r\n                                if(!text.length) return alert('Input is empty')\r\n                                \r\n                                add()\r\n                                setText('')\r\n                            }} \r\n                        />\r\n                    </Container>\r\n            </Container>\r\n        </Container>\r\n    )\r\n}","import { OPEN_EDITOR, CLOSE_EDITOR, OPEN_MODAL, CLOSE_MODAL } from \"./constants\"\r\n\r\nexport const openEditor = text => ({\r\n    type: OPEN_EDITOR,\r\n    payload: text\r\n})\r\n\r\nexport const closeEditor = () => ({\r\n    type: CLOSE_EDITOR\r\n})\r\n\r\nexport const openModal = name => ({\r\n    type: OPEN_MODAL,\r\n    payload: name\r\n})\r\n\r\nexport const closeModal = () => ({\r\n    type: CLOSE_MODAL\r\n})\r\n","export const OPEN_EDITOR = 'OPEN_EDITOR'\r\nexport const CLOSE_EDITOR = 'CLOSE_EDITOR'\r\n\r\nexport const OPEN_MODAL = 'OPEN_MODAL'\r\nexport const CLOSE_MODAL = 'CLOSE_MODAL'","import React from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\n\r\nimport { Container } from '../common/layout/layout'\r\nimport { Text } from '../common/typography/typography.shared'\r\n\r\nimport { openEditor } from '../../redux/app/actions'\r\n\r\nexport const Output = () => {\r\n    \r\n    const texts = useSelector(state => state.text.texts)\r\n    const activeText = useSelector(state => state.text.activeText) || ''\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    if(!texts.length) return (\r\n        <Container h='50vh'>\r\n            <h4>Add some text</h4>\r\n        </Container>\r\n    )\r\n    \r\n    return (\r\n        <Container minH='50vh' wrap='true'>\r\n            {\r\n                texts.map(text => \r\n                    <Container\r\n                        onClick={() => dispatch(openEditor(text))} \r\n                        key={text.id} \r\n                        shadow={activeText.id === text.id} \r\n                        p='10px' \r\n                        w='auto' \r\n                        m='10px'\r\n\r\n                        style={{\r\n                            borderRadius: 5,\r\n                            cursor: 'pointer'\r\n                        }}\r\n                    >\r\n                        <Text \r\n                            text={text.text}\r\n                            color={text.color}\r\n                            bgColor={text.bgColor} \r\n                            fontSize={text.fontSize}\r\n                        />\r\n                    </Container>\r\n                )\r\n            }\r\n        </Container>\r\n    )\r\n}","import React from 'react'\r\n\r\nimport { Container } from '../common/layout/layout'\r\nimport { TextC } from '../common/typography/typography.shared'\r\n\r\nexport const EditView = ({ title, current, children }) => \r\n    <>\r\n    <Container justify='flex-start' w='90%'>\r\n        <h6 \r\n            style={{ color: 'silver' }}\r\n        >\r\n            {title}\r\n        </h6>\r\n    </Container>\r\n    <Container justify='space-between' w='90%'>\r\n        <TextC \r\n            text='Current' \r\n            fontSize='8px' \r\n            uppercase \r\n            color='silver'\r\n            weight='800' \r\n        />\r\n        <TextC \r\n            text={current} \r\n            color='#fff' \r\n            fontSize='9px'\r\n            weight='500' \r\n            uppercase\r\n        />\r\n    </Container>\r\n    {children}\r\n    </>","import React, { useState } from 'react'\r\n\r\nimport { EditView } from '../Edit.view'\r\nimport { ColorSelect } from '../../common/select/select.shared'\r\n\r\nimport { Container } from '../../common/layout/layout'\r\n\r\nimport { useText } from '../../../hooks/useText'\r\nimport { Button } from '../../common/buttons/buttons.shared'\r\nimport { Color } from '../../common/select/select.styled'\r\nimport { TextC } from '../../common/typography/typography.shared'\r\n\r\nexport const ColorEdit = ({ currColor, text, colorType }) => {\r\n\r\n    const [color, setColor] = useState(currColor)\r\n    \r\n    const { update } = useText({\r\n        ...text,\r\n        [colorType]: color\r\n    })\r\n    \r\n    return (\r\n        <EditView title={`Change ${colorType}`} current={currColor}>\r\n            <Container justify='space-between' w='90%'>\r\n                <TextC text='Your choice' uppercase fontSize='10px' />\r\n                <Color bgColor={color} />\r\n            </Container>\r\n            <Container \r\n                justify='space-between' \r\n                w='90%' \r\n                m='20px 0'\r\n                p='80px'\r\n                direction='column'\r\n            >\r\n               <Container wrap='true' m='10px'>\r\n                    <ColorSelect \r\n                        title='Color'\r\n                        showHeader={false}\r\n                        showControl={false}\r\n                        isOpen={true}\r\n                        onColorClick={color => setColor(color)}\r\n                    />\r\n                </Container> \r\n            </Container>\r\n            <Button \r\n                title='Update' \r\n                bgColor='#0078F2' \r\n                click={() => update()} \r\n            />\r\n        </EditView>\r\n    )\r\n}\r\n\r\n","import React, { useState } from 'react'\r\n\r\nimport { EditView } from '../Edit.view'\r\n\r\nimport { Container } from '../../common/layout/layout'\r\nimport { TextC } from '../../common/typography/typography.shared'\r\nimport { Button } from '../../common/buttons/buttons.shared'\r\n\r\nimport { Input } from '../../common/inputs/inputs.shared'\r\n\r\nimport { useText } from '../../../hooks/useText'\r\n\r\nexport const SizeEdit = ({ current, text }) => {\r\n\r\n    const [fontSize, setSize] = useState(current)\r\n    \r\n    const { update } = useText({\r\n        ...text,\r\n        fontSize\r\n    })\r\n\r\n    return (\r\n        <EditView title='Change size' current={current}>\r\n            <Container \r\n                justify='space-between' \r\n                w='90%' \r\n                m='20px 0'\r\n                h='100px' \r\n                direction='column'\r\n            >\r\n                <Container justify='space-between'>\r\n                    <TextC   \r\n                        text='New' \r\n                        fontSize='9px' \r\n                        uppercase \r\n                        color='silver'\r\n                        weight='500' \r\n                    />\r\n                    <Input\r\n                        placeholder={current} \r\n                        w='40px' \r\n                        p='7px' \r\n                        type='number' \r\n                        change={event => setSize(event.target.value + 'px')}\r\n                    />\r\n                </Container>\r\n            </Container>\r\n            <Container>\r\n            {\r\n                fontSize\r\n                &&\r\n                <Button \r\n                    title='Update'\r\n                    p='10px' \r\n                    bgColor='#0078F2'\r\n                    click={() => update()}\r\n                /> \r\n            }\r\n            </Container>\r\n        </EditView>\r\n    )\r\n}\r\n\r\n","import React, { useState } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\n\r\nimport { Input } from '../../common/inputs/inputs.shared'\r\nimport { Container } from '../../common/layout/layout'\r\nimport { Button } from '../../common/buttons/buttons.shared'\r\n\r\nimport { EditView } from '../Edit.view'\r\n\r\nimport { updateTextValue } from '../../../redux/text/actions'\r\n\r\nexport const ControlEdit = ({ text }) => {\r\n\r\n    const [name, setName] = useState('')\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    return (\r\n        <EditView title='Change text' current={text.text}>\r\n            <Container \r\n                justify='space-between' \r\n                w='90%' \r\n                m='20px 0'\r\n                h='100px' \r\n                direction='column'\r\n            >\r\n               <Container m='10px'>\r\n                   <Input \r\n                        type='text' \r\n                        placeholder='New name'\r\n                        change={event => setName(event.target.value)}\r\n                        p='7px' \r\n                    />\r\n                </Container> \r\n                {\r\n                    name\r\n                    &&\r\n                    <Button \r\n                        title='Update' \r\n                        bgColor='#0078F2'\r\n                        click={() => dispatch(updateTextValue(text.id, name))}\r\n                    /> \r\n                }\r\n            </Container>\r\n        </EditView>\r\n    )\r\n}","import React from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\n\r\nimport { Container } from '../common/layout/layout'\r\nimport { Button } from '../common/buttons/buttons.shared'\r\n\r\nimport { ColorEdit } from './views/Color.edit'\r\nimport { SizeEdit } from './views/Size.edit'\r\nimport { ControlEdit } from './views/Control.edit'\r\n\r\nimport { TextC } from '../common/typography/typography.shared'\r\n\r\nimport { closeEditor } from '../../redux/app/actions'\r\nimport { deleteText } from '../../redux/text/actions'\r\n\r\nexport const Editor = () => {\r\n\r\n    const isEditorOpen = useSelector(state => state.app.isEditorOpen)\r\n    const text = useSelector(state => state.app.text)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    return (\r\n        <>\r\n        {\r\n            isEditorOpen\r\n            &&\r\n            <Container \r\n                h='100vh'\r\n                w='20%'\r\n                bgColor='#1c1c1c' \r\n                shadow \r\n                justify='flex-start'\r\n                direction='column'\r\n                style={{\r\n                    position: 'fixed',\r\n                    right: 0,\r\n                    top: 0,\r\n                    overflowY: 'scroll',\r\n                    overflowX: 'hidden'\r\n                }}\r\n            >\r\n                <Container justify='space-around' p='10px 0'>\r\n                    <TextC text='Text Editor' uppercase />\r\n                    <Button \r\n                        title='x' \r\n                        bgColor='red' \r\n                        click={() => dispatch(closeEditor())} \r\n                    />\r\n                </Container>\r\n                <Button \r\n                    bgColor='brown' \r\n                    title='Delete'\r\n                    click={() => dispatch(deleteText(text.id))} \r\n                />\r\n                <ControlEdit \r\n                    text={text}\r\n                />\r\n                <SizeEdit \r\n                    current={text.fontSize}\r\n                    text={text}\r\n                />\r\n                <ColorEdit \r\n                    currColor={text.color} \r\n                    text={text} \r\n                    colorType='color'\r\n                />\r\n                <ColorEdit \r\n                    currColor={text.bgColor} \r\n                    text={text} \r\n                    colorType='bgColor'\r\n                />\r\n            </Container>    \r\n        }\r\n        </>\r\n    )\r\n}\r\n","import styled from \"styled-components\"\r\n\r\nexport const ModalStyled = styled.div`\r\n    width: 100%;\r\n    height: 100vh;\r\n\r\n    background-color: #1c1c1c;\r\n\r\n    position: fixed;\r\n    top: 0;\r\n`","import React from 'react'\r\nimport { useDispatch } from 'react-redux'\r\n\r\nimport { ModalStyled } from './modal.styled'\r\n\r\nimport { Container } from '../layout/layout'\r\nimport { TextC } from '../typography/typography.shared'\r\nimport { Button } from '../buttons/buttons.shared'\r\n\r\nimport { closeModal } from '../../../redux/app/actions'\r\n\r\nexport const Modal = ({ \r\n    children, \r\n    title \r\n}) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    return (\r\n        <ModalStyled>\r\n            <Container justify='space-around' p='20px'>\r\n                <TextC \r\n                    text={title} \r\n                    fontSize='20px' \r\n                />\r\n                <Button \r\n                    title='x' \r\n                    p='20px' \r\n                    bgColor='red'\r\n                    click={() => dispatch(closeModal())} \r\n                />\r\n            </Container>\r\n            {children}\r\n        </ModalStyled>\r\n    )\r\n}","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\n\r\nimport { Modal } from '../common/modal/modal.shared'\r\nimport { Container } from '../common/layout/layout'\r\nimport { useText } from '../../hooks/useText'\r\n\r\nexport const JsonModal = () => {\r\n    \r\n    const modal = useSelector(state => state.app.modal)\r\n    const { getJSON } = useText()\r\n\r\n    return (\r\n        <>\r\n        {\r\n            modal === 'json'\r\n            &&\r\n            <Modal title='Texts in JSON'>\r\n                <Container w='70%' m='0 auto'>\r\n                    <pre \r\n                        style={{ color: 'silver' }}\r\n                    >\r\n                        {getJSON()}\r\n                    </pre>\r\n                </Container>\r\n            </Modal>\r\n        }\r\n        </>\r\n    )\r\n}","import React from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { Container } from './components/common/layout/layout'\n\nimport { Control } from './components/Control/Control'\nimport { Output } from './components/Output/Output'\nimport { Editor } from './components/Editor/Editor'\nimport { JsonModal } from './components/Json/Json.modal'\n\nexport const App = () => {\n\n\tconst state = useSelector(state => state)\n\tconsole.log(state)\n\n\treturn (\n\t\t<>\n\t\t<Container\n\t\t\tw='80%'  \n\t\t\tm='5% auto'\n\t\t\tp='20px'\n\t\t\tdirection='column'\n\t\t\tshadow\n\t\t>\n\t\t\t<Control />\n\t\t\t<Output />\n\t\t</Container>\n\t\t<Editor />\n\t\t<JsonModal />\n\t\t</>\n\t)\n}\n\n","import { OPEN_EDITOR, CLOSE_EDITOR, OPEN_MODAL, CLOSE_MODAL } from \"./constants\"\r\n\r\nconst initialState = {\r\n    isEditorOpen: false,\r\n    text: null,\r\n    modal: ''\r\n}\r\n\r\nexport const appReducer = (state = initialState, action) => {\r\n    switch(action.type) {  \r\n        case OPEN_EDITOR:\r\n            return {\r\n                ...state,\r\n                isEditorOpen: true,\r\n                text: action.payload\r\n            }\r\n        case CLOSE_EDITOR:\r\n            return {\r\n                ...state,\r\n                isEditorOpen: false\r\n            }\r\n        case OPEN_MODAL:\r\n            return {\r\n                ...state,\r\n                modal: action.payload\r\n            }\r\n        case CLOSE_MODAL:\r\n            return {\r\n                ...state,\r\n                modal: null\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import { ADD_TEXT_TO_STORE, DELETE_TEXT, SET_ACTIVE_TEXT, UPDATE_TEXT_VALUE } from './constants'\r\n\r\nconst initialState = {\r\n    texts: [],\r\n    activeText: 0\r\n}\r\n\r\nexport const textReducer = (state = initialState, action) => {\r\n    switch(action.type) {   \r\n        case ADD_TEXT_TO_STORE:\r\n            return {\r\n                ...state,\r\n                texts: state.texts\r\n                    .concat(action.payload)\r\n                    .filter((item, index, array) => array.findIndex(text => (text.id === item.id)) === index)\r\n            }\r\n        case DELETE_TEXT:\r\n            return {\r\n                ...state,\r\n                texts: state.texts.filter(text => text.id !== action.payload)\r\n            }\r\n        case SET_ACTIVE_TEXT:\r\n            return {\r\n                ...state,\r\n                activeText: action.payload\r\n            }\r\n        case UPDATE_TEXT_VALUE:\r\n            return {\r\n                ...state,\r\n                text: state.texts.forEach(text => {\r\n                    if(text.id === action.payload.id) {\r\n                        text.text = action.payload.text\r\n                    }\r\n                })\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import { createStore } from 'redux'\r\n\r\nimport { rootReducer } from './rootReducer'\r\n\r\nexport const store = createStore(rootReducer())","import { combineReducers } from 'redux'\r\n\r\nimport { appReducer } from './app/reducer'\r\nimport { textReducer } from './text/reducer'\r\n\r\nexport const rootReducer = () => combineReducers({\r\n        app: appReducer,\r\n        text: textReducer\r\n    })\r\n\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\n\nimport { App } from './App'\n\nimport { store } from './redux/store'\n\nimport './index.css'\n\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>,\n\tdocument.getElementById('root')\n)\n\n"],"sourceRoot":""}